version: '3.8'

services:
  api:
    build: .
    container_name: rp-api
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/rp_dev
      - SUPABASE_URL=http://kong:8000
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-anon-key}
      - JWT_SECRET=${JWT_SECRET:-default-secret}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - net

  db:
    image: supabase/postgres:15.8.1.060
    container_name: rp-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: rp_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      JWT_SECRET: ${JWT_SECRET:-default-secret}
    volumes:
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - net

  kong:
    image: kong:2.8.1
    container_name: rp-kong
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8443:8443"
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /home/kong/kong.yml
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl,basic-auth
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-anon-key}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY:-service-key}
    volumes:
      - ./docker/kong.yml:/home/kong/kong.yml:ro
    networks:
      - net

  meta:
    image: supabase/postgres-meta:v0.89.0
    container_name: rp-meta
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: db
      PG_META_DB_PORT: 5432
      PG_META_DB_NAME: rp_dev
      PG_META_DB_USER: postgres
      PG_META_DB_PASSWORD: postgres
    networks:
      - net

  studio:
    image: supabase/studio:2025.05.19-sha-3487831
    container_name: rp-studio
    restart: unless-stopped
    ports:
      - "3006:3000" # studio UI accessible at localhost:3006
    depends_on:
      - meta
    environment:
      SUPABASE_URL: http://kong:8000
      SUPABASE_PUBLIC_URL: http://localhost:8000
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-anon-key}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY:-service-key}
      AUTH_JWT_SECRET: ${JWT_SECRET:-default-secret}
      STUDIO_PG_META_URL: http://meta:8080
      POSTGRES_PASSWORD: postgres
      DEFAULT_ORGANIZATION_NAME: RP
      DEFAULT_PROJECT_NAME: RP Dev
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "fetch('http://localhost:3000/api/platform/profile').then((r) => { if (r.status !== 200) throw new Error(r.status) })"
        ]
      interval: 5s
      timeout: 5s
      retries: 3
    networks:
      - net

  rest:
    image: postgrest/postgrest:v12.2.12
    container_name: rp-rest
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      PGRST_DB_URI: postgres://postgres:postgres@db:5432/rp_dev
      PGRST_DB_SCHEMAS: public
      PGRST_DB_ANON_ROLE: postgres
      PGRST_JWT_SECRET: ${JWT_SECRET:-default-secret}
      PGRST_DB_USE_LEGACY_GUCS: "false"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - net

networks:
  net:
    driver: bridge
